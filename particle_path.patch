diff --git a/VTK/Filters/FlowPaths/vtkParticlePathFilter.cxx b/VTK/Filters/FlowPaths/vtkParticlePathFilter.cxx
index 4e73f91..e1ab3b4 100644
--- a/VTK/Filters/FlowPaths/vtkParticlePathFilter.cxx
+++ b/VTK/Filters/FlowPaths/vtkParticlePathFilter.cxx
@@ -124,11 +124,38 @@ void ParticlePathFilterInternal::Finalize()
            << "\n" << "): " <<" no lines in the output"<< "\n\n";
     return;
   }
-  for(unsigned int i=0; i<this->Paths.size(); i++)
+  // if we have a path that leaves a process and than comes back we need
+  // to add that as separate cells. we use the simulation time step to check
+  // on that assuming that the particle path filter is updated every time step.
+  vtkIntArray* sourceSimulationTimeStepArray = vtkArrayDownCast<vtkIntArray>(
+    this->Filter->Output->GetPointData()->GetArray("SimulationTimeStep"));
+  vtkNew<vtkIdList> tmpIds;
+  for(size_t i=0; i<this->Paths.size(); i++)
   {
     if(this->Paths[i]->GetNumberOfIds()>1)
     {
-      outLines->InsertNextCell(this->Paths[i]);
+      vtkIdList* ids = this->Paths[i];
+      int previousTimeStep = sourceSimulationTimeStepArray->GetTypedComponent(ids->GetId(0), 0);
+      tmpIds->Reset();
+      tmpIds->InsertNextId(ids->GetId(0));
+      for (vtkIdType j=1; j<ids->GetNumberOfIds(); j++)
+      {
+        int currentTimeStep = sourceSimulationTimeStepArray->GetTypedComponent(ids->GetId(j), 0);
+        if (currentTimeStep != (previousTimeStep + 1))
+        {
+          if (tmpIds->GetNumberOfIds() > 1)
+          {
+            outLines->InsertNextCell(tmpIds);
+          }
+          tmpIds->Reset();
+        }
+        tmpIds->InsertNextId(ids->GetId(j));
+        previousTimeStep = currentTimeStep;
+      }
+      if (tmpIds->GetNumberOfIds() > 1)
+      {
+        outLines->InsertNextCell(tmpIds);
+      }
     }
   }
 }
